---- Netflix Exploratory Analysis Report (MYSQL)

---- Creating the table

CREATE TABLE reviewers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255,
    last_name VARCHAR(255)
);

CREATE TABLE series(
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255),
    released_year YEAR(4),
    genre VARCHAR(255)
    );
    
    
CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rating DECIMAL(2,1),
    series_id INT,
    reviewer_id INT,
    FOREIGN KEY(series_id) REFERENCES series(id),
    FOREIGN KEY(reviewer_id) REFERENCES reviewers(id)
);

INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama'),
    ('The Office', 2005, 'Comedy');
    
    INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');
    
 reviewers   INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);
 
    select *
    from reviewers
    
    select *
    from reviews

    select *
    from serires
    
    --- 1) Exploring each titles average rating from every user for each tv show on Netflix in order from lowest rating to highest.
     select title, AVG(rating) AS AVG_Rating 
    FROM series a
    INNER JOIN reviews b
      ON a.id = b.series_id
    GROUP BY title, rating
    ORDER BY rating;
    
	---2) Finding the unreviewed TV series within the reviews table. 
    SELECT title AS Missing_Rating
    FROM series a
    LEFT JOIN reviews b
      ON a.id = b.series_id
    WHERE rating IS NULL;
    
    
     ---3) Showcasing the rating averages for each genre within the database and rounding up the results by 2 decimal points.
        SELECT genre, ROUND(AVG(rating), 2) AS AVG_rating 
    FROM series a
    INNER JOIN reviews b
    ON a.id = b.series_id
    GROUP BY genre, rating
    ORDER BY AVG_rating;
    
 ---4) Displaying the rating averages for each genre within the database, from highest rating to lowest rating.
    
    SELECT genre, AVG(rating) as AVG_rating
    FROM series a
    INNER JOIN reviews b
    ON a.id = b.series_id
     GROUP BY genre, rating
    ORDER BY AVG_rating desc;
    
 ---5) Finding the top 3 rating averages for each DISTINCT genre within the database.

with distinct_genre as (
  SELECT genre, id, ROW_NUMBER() OVER (PARTITION BY genre ORDER BY genre) AS row_num
  FROM series
)
SELECT genre, AVG(rating) AS AVG_rating
FROM distinct_genre a
INNER JOIN reviews b ON a.id = b.series_id
WHERE a.row_num = 1
GROUP BY genre
ORDER BY AVG_rating DESC
LIMIT 3;

---6) Join all 3 tables to find the first & last name, title, and rating for each user 
  SELECT 
    title,
    rating,
    first_name,
    last_name
FROM reviewers a
INNER JOIN reviews b
 ON a.id = b.reviewer_id
INNER JOIN series c
 ON c.id = b.series_id
ORDER BY title;

How can this help a business out? 
Conducting an in-depth analysis of user ratings for each TV show on Netflix, I systematically organize the average ratings attributed to 
each title from different tables to order the ratings from lowest to highest, identified the unreviewed TV series within the database, and aggregated 
review averages to unveil valuable insights into audience preferences and show popularity.  This approach fosters data-driven insights to empower strategic content 
curation and a better understanding of user engagement to contribute to greater operational successes of the streaming platform.

